generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * ───────────────────────────────────────────────
 * ENUM PARA OS PAPÉIS DE USUÁRIO
 * ───────────────────────────────────────────────
 */
enum Role {
  ADMIN
  LIGANTE
}

/**
 * ───────────────────────────────────────────────
 * DEFINIÇÃO DE TODAS AS SUAS TABELAS
 * ───────────────────────────────────────────────
 */

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  handle             String?              @unique
  image              String?
  password           String?
  fullName           String?
  role               Role                 @default(LIGANTE) // ← agora enum
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  posts              Post[]
  events             Event[]
  Attendance         Attendance[]
  boards             Board[]
  assignedTasks      Task[]
  createdTasks       Task[]               @relation("TaskCreator")
  tag                String?
  tagColor           String?
  microPosts         MicroPost[]          @relation("UserMicroPosts")
  microPostComments  MicroPostComment[]   @relation("UserMicroPostComments")
  postLikes          PostLike[]           @relation("UserLikes")
  postComments       PostComment[]        @relation("UserComments")
  createdFolders     Folder[]             @relation("FolderCreator")
  uploadedMaterials  Material[]           @relation("MaterialUploader")
  phone              String?
  appImage           String?
  PasswordResetToken PasswordResetToken[]

  @@index([email])
  @@index([fullName])
}

model Folder {
  id        String     @id @default(cuid())
  name      String
  category  String
  parentId  String?
  parent    Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[]   @relation("FolderHierarchy")
  materials Material[]
  createdBy String
  creator   User       @relation("FolderCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([parentId])
  @@index([category])
  @@index([createdBy])
}

model Material {
  id         String   @id @default(cuid())
  name       String
  url        String
  type       String
  folderId   String
  folder     Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  uploadedBy String
  uploader   User     @relation("MaterialUploader", fields: [uploadedBy], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([folderId])
  @@index([uploadedBy])
  @@index([name])
}

model MicroPost {
  id          String                @id @default(cuid())
  content     String
  authorId    String
  author      User                  @relation("UserMicroPosts", fields: [authorId], references: [id], onDelete: Cascade)
  isPinned    Boolean               @default(false)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  comments    MicroPostComment[]
  attachments MicroPostAttachment[]

  @@index([authorId])
  @@index([createdAt])
}

model MicroPostComment {
  id        String    @id @default(cuid())
  content   String
  authorId  String
  author    User      @relation("UserMicroPostComments", fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      MicroPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([authorId])
  @@index([postId])
}

model MicroPostAttachment {
  id        String    @id @default(cuid())
  url       String
  name      String
  type      String
  postId    String
  post      MicroPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())

  @@index([postId])
}

model Post {
  id        String        @id @default(cuid())
  type      String
  title     String?
  content   String
  imageUrl  String?
  authorId  String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     PostLike[]
  comments  PostComment[]

  @@index([createdAt])
  @@index([authorId])
}

model PostLike {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([postId])
}

model PostComment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
}

model Event {
  id          String       @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  instructor  String?
  attachments String?
  authorId    String
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([startDate])
  @@index([authorId])
}

model Attendance {
  id       String   @id @default(cuid())
  userId   String
  eventId  String
  present  Boolean  @default(false)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  markedAt DateTime @default(now())

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Board {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  columns     Column[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdBy])
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  name      String
  type      String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([taskId])
}

model Column {
  id        String   @id @default(cuid())
  title     String
  position  Int      @default(0)
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
  @@index([position])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  position    Int          @default(0)
  priority    String       @default("MEDIUM")
  dueDate     DateTime?
  assignedTo  String?
  assignee    User?        @relation(fields: [assignedTo], references: [id], onDelete: SetNull)
  columnId    String
  column      Column       @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdBy   String
  creator     User         @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]

  @@index([columnId])
  @@index([position])
  @@index([assignedTo])
  @@index([createdBy])
}

/// ─────────────────────────────────────────────
///  TOKENS PARA “ESQUECI A SENHA”
///  Um registro por pedido de reset.
/// ─────────────────────────────────────────────
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([expiresAt])
}
